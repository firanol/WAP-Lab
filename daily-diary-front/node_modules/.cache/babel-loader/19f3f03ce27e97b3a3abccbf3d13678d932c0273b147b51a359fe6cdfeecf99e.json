{"ast":null,"code":"import { CustomError } from \"../utils/customError\";\nimport { StatusCode } from \"../models/enums/StatusCodeEnum\";\nexport class APIService {\n  constructor() {\n    this.getBaseUrl = () => {\n      return \"http://localhost:8080/api\";\n    };\n    this.generateHeader = () => {\n      const headers = new Headers();\n      headers.set(\"Accept\", \"application/json\");\n      headers.set(\"Content-Type\", \"application/json\");\n      return headers;\n    };\n    this.getData = url => {\n      return fetch(url, {\n        method: \"GET\",\n        headers: this.generateHeader()\n      });\n    };\n    this.postData = (url, data) => {\n      return fetch(url, {\n        method: \"POST\",\n        headers: this.generateHeader(),\n        body: JSON.stringify(data)\n      });\n    };\n    this.putData = (url, data) => {\n      return fetch(url, {\n        method: \"PUT\",\n        headers: this.generateHeader(),\n        body: JSON.stringify(data)\n      });\n    };\n    this.patchData = (url, data) => {\n      return fetch(url, {\n        method: \"PATCH\",\n        headers: this.generateHeader(),\n        body: JSON.stringify(data)\n      });\n    };\n    this.deleteData = url => {\n      return fetch(url, {\n        method: \"GET\",\n        headers: this.generateHeader()\n      });\n    };\n    this.throwError = async response => {\n      const errorResponse = await response.json();\n      if (errorResponse.status === StatusCode.BAD_REQUEST) {\n        throw new CustomError(errorResponse.status, errorResponse.message, response.statusText);\n      }\n      window.location.href = \"/error\";\n    };\n  }\n}","map":{"version":3,"names":["CustomError","StatusCode","APIService","constructor","getBaseUrl","generateHeader","headers","Headers","set","getData","url","fetch","method","postData","data","body","JSON","stringify","putData","patchData","deleteData","throwError","response","errorResponse","json","status","BAD_REQUEST","message","statusText","window","location","href"],"sources":["/Users/firanolabdisa/Desktop/cs472-project/daily-diary-front/src/services/apiService.ts"],"sourcesContent":["import { CustomError } from \"../utils/customError\";\nimport { StatusCode } from \"../models/enums/StatusCodeEnum\";\nimport { ErrorResponse } from \"../models/ErrorResponse\";\n\nexport class APIService {\n    getBaseUrl = (): string => {\n        return \"http://localhost:8080/api\";\n    };\n\n    generateHeader = (): Headers => {\n        const headers: Headers = new Headers();\n        headers.set(\"Accept\", \"application/json\");\n        headers.set(\"Content-Type\", \"application/json\");\n        return headers;\n    };\n\n    getData = (url: string): Promise<Response> => {\n        return fetch(url, {\n            method: \"GET\",\n            headers: this.generateHeader(),\n        });\n    };\n\n    postData = (url: string, data: any): Promise<Response> => {\n        return fetch(url, {\n            method: \"POST\",\n            headers: this.generateHeader(),\n            body: JSON.stringify(data),\n        });\n    };\n\n    putData = (url: string, data: any): Promise<Response> => {\n        return fetch(url, {\n            method: \"PUT\",\n            headers: this.generateHeader(),\n            body: JSON.stringify(data),\n        });\n    };\n\n    patchData = (url: string, data: any): Promise<Response> => {\n        return fetch(url, {\n            method: \"PATCH\",\n            headers: this.generateHeader(),\n            body: JSON.stringify(data),\n        });\n    };\n\n    deleteData = (url: string): Promise<Response> => {\n        return fetch(url, {\n            method: \"GET\",\n            headers: this.generateHeader(),\n        });\n    };\n\n    throwError = async (response: Response) => {\n        const errorResponse: ErrorResponse = await response.json();\n        if (errorResponse.status === StatusCode.BAD_REQUEST) {\n            throw new CustomError(\n                errorResponse.status,\n                errorResponse.message,\n                response.statusText\n            );\n        }\n        window.location.href = \"/error\";\n    };\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,sBAAsB;AAClD,SAASC,UAAU,QAAQ,gCAAgC;AAG3D,OAAO,MAAMC,UAAU,CAAC;EAAAC,YAAA;IAAA,KACpBC,UAAU,GAAG,MAAc;MACvB,OAAO,2BAA2B;IACtC,CAAC;IAAA,KAEDC,cAAc,GAAG,MAAe;MAC5B,MAAMC,OAAgB,GAAG,IAAIC,OAAO,CAAC,CAAC;MACtCD,OAAO,CAACE,GAAG,CAAC,QAAQ,EAAE,kBAAkB,CAAC;MACzCF,OAAO,CAACE,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;MAC/C,OAAOF,OAAO;IAClB,CAAC;IAAA,KAEDG,OAAO,GAAIC,GAAW,IAAwB;MAC1C,OAAOC,KAAK,CAACD,GAAG,EAAE;QACdE,MAAM,EAAE,KAAK;QACbN,OAAO,EAAE,IAAI,CAACD,cAAc,CAAC;MACjC,CAAC,CAAC;IACN,CAAC;IAAA,KAEDQ,QAAQ,GAAG,CAACH,GAAW,EAAEI,IAAS,KAAwB;MACtD,OAAOH,KAAK,CAACD,GAAG,EAAE;QACdE,MAAM,EAAE,MAAM;QACdN,OAAO,EAAE,IAAI,CAACD,cAAc,CAAC,CAAC;QAC9BU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,IAAI;MAC7B,CAAC,CAAC;IACN,CAAC;IAAA,KAEDI,OAAO,GAAG,CAACR,GAAW,EAAEI,IAAS,KAAwB;MACrD,OAAOH,KAAK,CAACD,GAAG,EAAE;QACdE,MAAM,EAAE,KAAK;QACbN,OAAO,EAAE,IAAI,CAACD,cAAc,CAAC,CAAC;QAC9BU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,IAAI;MAC7B,CAAC,CAAC;IACN,CAAC;IAAA,KAEDK,SAAS,GAAG,CAACT,GAAW,EAAEI,IAAS,KAAwB;MACvD,OAAOH,KAAK,CAACD,GAAG,EAAE;QACdE,MAAM,EAAE,OAAO;QACfN,OAAO,EAAE,IAAI,CAACD,cAAc,CAAC,CAAC;QAC9BU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,IAAI;MAC7B,CAAC,CAAC;IACN,CAAC;IAAA,KAEDM,UAAU,GAAIV,GAAW,IAAwB;MAC7C,OAAOC,KAAK,CAACD,GAAG,EAAE;QACdE,MAAM,EAAE,KAAK;QACbN,OAAO,EAAE,IAAI,CAACD,cAAc,CAAC;MACjC,CAAC,CAAC;IACN,CAAC;IAAA,KAEDgB,UAAU,GAAG,MAAOC,QAAkB,IAAK;MACvC,MAAMC,aAA4B,GAAG,MAAMD,QAAQ,CAACE,IAAI,CAAC,CAAC;MAC1D,IAAID,aAAa,CAACE,MAAM,KAAKxB,UAAU,CAACyB,WAAW,EAAE;QACjD,MAAM,IAAI1B,WAAW,CACjBuB,aAAa,CAACE,MAAM,EACpBF,aAAa,CAACI,OAAO,EACrBL,QAAQ,CAACM,UACb,CAAC;MACL;MACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IACnC,CAAC;EAAA;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}