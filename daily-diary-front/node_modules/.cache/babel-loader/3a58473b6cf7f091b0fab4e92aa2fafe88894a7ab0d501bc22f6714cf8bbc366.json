{"ast":null,"code":"import { APIService } from \"../apiService\";\nimport { StatusCode } from \"../../models/enums/StatusCodeEnum\";\nexport class PostService extends APIService {\n  constructor(...args) {\n    super(...args);\n    // Method to add a post\n    this.addPost = async (date, post) => {\n      const url = `${this.getBaseUrl()}/posts`;\n      const requestBody = {\n        ...post,\n        date: date\n      };\n      const response = await this.postData(url, requestBody);\n      if (response.status !== StatusCode.CREATED) {\n        await this.throwError(response);\n      }\n      return await response.json();\n    };\n    // Method to get all posts\n    this.getAllPosts = async date => {\n      const url = `${this.getBaseUrl()}/posts?date=${date}`;\n      const response = await this.getData(url);\n      if (response.status !== StatusCode.SUCCESS) {\n        await this.throwError(response);\n      }\n      return await response.json();\n    };\n    // Method to get a post by its ID\n    this.getPostById = async (id, date) => {\n      const url = `${this.getBaseUrl()}/posts/${id}?date=${date}`;\n      const response = await this.getData(url);\n      if (response.status !== StatusCode.SUCCESS) {\n        await this.throwError(response);\n      }\n      return await response.json();\n    };\n    // Method to update votes for a post by its ID\n    this.votedPostById = async (id, date, votes) => {\n      const url = `${this.getBaseUrl()}/posts/${id}`;\n      const requestBody = {\n        date: date,\n        votes: votes\n      };\n      const response = await this.patchData(url, requestBody);\n      if (response.status !== StatusCode.SUCCESS) {\n        await this.throwError(response);\n      }\n      return await response.json();\n    };\n    // Method to update a post by its ID\n    this.updatePostById = async (id, date, updatedData) => {\n      const url = `${this.getBaseUrl()}/posts/${id}`;\n      const requestBody = {\n        ...updatedData,\n        date: date\n      };\n      const response = await this.putData(url, requestBody);\n      if (response.status !== StatusCode.SUCCESS) {\n        await this.throwError(response);\n      }\n      return await response.json();\n    };\n  }\n}","map":{"version":3,"names":["APIService","StatusCode","PostService","constructor","args","addPost","date","post","url","getBaseUrl","requestBody","response","postData","status","CREATED","throwError","json","getAllPosts","getData","SUCCESS","getPostById","id","votedPostById","votes","patchData","updatePostById","updatedData","putData"],"sources":["/Users/firanolabdisa/Desktop/cs472-project/daily-diary-front/src/services/post/postService.ts"],"sourcesContent":["import { Post } from \"../../models/Post\";\nimport { APIService } from \"../apiService\";\nimport { StatusCode } from \"../../models/enums/StatusCodeEnum\";\n\nexport class PostService extends APIService {\n    \n    // Method to add a post\n    addPost = async (date: string, post: Post): Promise<Post> => {\n        const url: string = `${this.getBaseUrl()}/posts`;\n        const requestBody = {\n            ...post,\n            date: date,\n        };\n        \n        const response: Response = await this.postData(url, requestBody);\n\n        if (response.status !== StatusCode.CREATED) {\n            await this.throwError(response);\n        }\n\n        return await response.json();\n    };\n\n    // Method to get all posts\n    getAllPosts = async (date: string): Promise<Post[]> => {\n        const url: string = `${this.getBaseUrl()}/posts?date=${date}`;\n        const response: Response = await this.getData(url);\n\n        if (response.status !== StatusCode.SUCCESS) {\n            await this.throwError(response);\n        }\n\n        return await response.json();\n    };\n\n    // Method to get a post by its ID\n    getPostById = async (id: string, date: string): Promise<Post> => {\n        const url: string = `${this.getBaseUrl()}/posts/${id}?date=${date}`;\n        const response: Response = await this.getData(url);\n\n        if (response.status !== StatusCode.SUCCESS) {\n            await this.throwError(response);\n        }\n\n        return await response.json();\n    };\n\n    // Method to update votes for a post by its ID\n    votedPostById = async (\n        id: string,\n        date: string,\n        votes: number\n    ): Promise<Post> => {\n        const url: string = `${this.getBaseUrl()}/posts/${id}`;\n        const requestBody = {\n            date: date,\n            votes: votes,\n        };\n\n        const response: Response = await this.patchData(url, requestBody);\n\n        if (response.status !== StatusCode.SUCCESS) {\n            await this.throwError(response);\n        }\n        return await response.json();\n    };\n\n    // Method to update a post by its ID\n    updatePostById = async (\n        id: string,\n        date: string,\n        updatedData: { title: string; body: string }\n    ): Promise<Post> => {\n        const url: string = `${this.getBaseUrl()}/posts/${id}`;\n        const requestBody = {\n            ...updatedData,\n            date: date,\n        };\n\n        const response: Response = await this.putData(url, requestBody);\n\n        if (response.status !== StatusCode.SUCCESS) {\n            await this.throwError(response);\n        }\n\n        return await response.json();\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}