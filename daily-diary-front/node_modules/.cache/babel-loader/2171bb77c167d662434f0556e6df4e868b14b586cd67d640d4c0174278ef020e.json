{"ast":null,"code":"var _jsxFileName = \"/Users/firanolabdisa/Desktop/Lecture/cs472-project/daily-diary-front/src/pages/PostPage/PostPage.tsx\",\n  _s = $RefreshSig$();\nimport { Card, CardContent, CardHeader, Container } from \"@mui/material\";\nimport PostListItem from \"../../components/Post/PostListItem/PostListItem\";\nimport DateButtonGroup from \"../../components/Post/DateButtonGroup/DateButtonGroup\";\nimport { useContext, useEffect } from \"react\";\nimport { GlobalContext } from \"../../contexts/PostsContext\";\nimport { PostService } from \"../../services/post/postService\";\nimport { convertDateToFormat } from \"../../utils/utils\";\nimport { CustomError } from \"../../utils/customError\";\nimport { isToday } from \"date-fns\";\nimport { useLocation } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PostPage() {\n  _s();\n  const location = useLocation();\n  const postService = new PostService();\n  const {\n    posts,\n    searchDate,\n    isVoted,\n    isAddedNew,\n    updatePosts,\n    updateLoading,\n    updateNotify,\n    updateIsVoted,\n    updateIsAddedNew,\n    updateSearchDate\n  } = useContext(GlobalContext);\n  useEffect(() => {\n    updateSearchDate(new Date());\n  }, [location]);\n  useEffect(() => {\n    fetchPosts();\n  }, [searchDate, isVoted, isAddedNew]);\n  const fetchPosts = async () => {\n    updateLoading(true);\n    updateIsVoted(false);\n    updateIsAddedNew(false);\n    try {\n      const posts = await postService.getAllPosts(convertDateToFormat(searchDate, \"MM-dd-yyyy\"));\n      updatePosts(posts);\n      updateLoading(false);\n    } catch (error) {\n      let errorMsg = \"Unknow error!\";\n      if (error instanceof CustomError) {\n        errorMsg = error.message;\n      }\n      updateLoading(false);\n      updateNotify({\n        status: \"error\",\n        message: errorMsg\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"xl\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      variant: \"outlined\",\n      sx: {\n        m: 2,\n        p: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        title: `List Posts (${isToday(searchDate) ? \"Today\" : convertDateToFormat(searchDate, \"MMMM dd, yyyy\")})`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(DateButtonGroup, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), posts.length > 0 ? /*#__PURE__*/_jsxDEV(PostListItem, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(Card, {\n          variant: \"outlined\",\n          sx: {\n            mt: 4,\n            mb: 4\n          },\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: \"There is no posts\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(DateButtonGroup, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n_s(PostPage, \"NuaK7HO+97ArELARYdK9AtSPIbk=\", false, function () {\n  return [useLocation];\n});\n_c = PostPage;\nvar _c;\n$RefreshReg$(_c, \"PostPage\");","map":{"version":3,"names":["Card","CardContent","CardHeader","Container","PostListItem","DateButtonGroup","useContext","useEffect","GlobalContext","PostService","convertDateToFormat","CustomError","isToday","useLocation","jsxDEV","_jsxDEV","PostPage","_s","location","postService","posts","searchDate","isVoted","isAddedNew","updatePosts","updateLoading","updateNotify","updateIsVoted","updateIsAddedNew","updateSearchDate","Date","fetchPosts","getAllPosts","error","errorMsg","message","status","maxWidth","children","variant","sx","m","p","title","fileName","_jsxFileName","lineNumber","columnNumber","length","mt","mb","_c","$RefreshReg$"],"sources":["/Users/firanolabdisa/Desktop/Lecture/cs472-project/daily-diary-front/src/pages/PostPage/PostPage.tsx"],"sourcesContent":["import { Card, CardContent, CardHeader, Container } from \"@mui/material\";\nimport PostListItem from \"../../components/Post/PostListItem/PostListItem\";\nimport DateButtonGroup from \"../../components/Post/DateButtonGroup/DateButtonGroup\";\nimport { useContext, useEffect } from \"react\";\nimport { GlobalContext } from \"../../contexts/PostsContext\";\nimport { PostService } from \"../../services/post/postService\";\nimport { convertDateToFormat } from \"../../utils/utils\";\nimport { Post } from \"../../models/Post\";\nimport { CustomError } from \"../../utils/customError\";\nimport { isToday } from \"date-fns\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function PostPage() {\n    const location = useLocation();\n    const postService = new PostService();\n    const {\n        posts,\n        searchDate,\n        isVoted,\n        isAddedNew,\n        updatePosts,\n        updateLoading,\n        updateNotify,\n        updateIsVoted,\n        updateIsAddedNew,\n        updateSearchDate,\n    } = useContext(GlobalContext);\n\n    useEffect(() => {\n        updateSearchDate(new Date());\n    }, [location]);\n\n    useEffect(() => {\n        fetchPosts();\n    }, [searchDate, isVoted, isAddedNew]);\n\n    const fetchPosts = async () => {\n        updateLoading(true);\n        updateIsVoted(false);\n        updateIsAddedNew(false);\n        try {\n            const posts: Post[] = await postService.getAllPosts(\n                convertDateToFormat(searchDate, \"MM-dd-yyyy\")\n            );\n            updatePosts(posts);\n            updateLoading(false);\n        } catch (error) {\n            let errorMsg: string = \"Unknow error!\";\n            if (error instanceof CustomError) {\n                errorMsg = error.message;\n            }\n\n            updateLoading(false);\n            updateNotify({\n                status: \"error\",\n                message: errorMsg,\n            });\n        }\n    };\n\n    return (\n        <Container maxWidth=\"xl\">\n            <Card variant=\"outlined\" sx={{ m: 2, p: 2 }}>\n                <CardHeader\n                    title={`List Posts (${\n                        isToday(searchDate)\n                            ? \"Today\"\n                            : convertDateToFormat(searchDate, \"MMMM dd, yyyy\")\n                    })`}\n                />\n                <CardContent>\n                    <DateButtonGroup />\n                    {posts.length > 0 ? (\n                        <PostListItem />\n                    ) : (\n                        <Card variant=\"outlined\" sx={{ mt: 4, mb: 4 }}>\n                            <CardContent>There is no posts</CardContent>\n                        </Card>\n                    )}\n                    <DateButtonGroup />\n                </CardContent>\n            </Card>\n        </Container>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}