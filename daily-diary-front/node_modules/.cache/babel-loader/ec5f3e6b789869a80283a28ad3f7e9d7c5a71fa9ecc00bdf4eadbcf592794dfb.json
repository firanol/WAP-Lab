{"ast":null,"code":"var _jsxFileName = \"/Users/firanolabdisa/Desktop/tuan/1/cs472-project/daily-diary-front/src/contexts/PostsContext.tsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initStateValue = {\n  posts: [],\n  searchDate: new Date(),\n  isVoted: false,\n  isAddedNew: false,\n  loading: false,\n  notify: {\n    status: \"success\",\n    message: \"\"\n  }\n};\nconst initContextValue = {\n  ...initStateValue,\n  updatePosts: posts => {},\n  updateSearchDate: searchDate => {},\n  updateIsVoted: isVoted => {},\n  updateIsAddedNew: isVoted => {},\n  updateLoading: loading => {},\n  updateNotify: notify => {},\n  updatePost: (id, updatedData) => {}\n};\nexport const GlobalContext = /*#__PURE__*/createContext(initContextValue);\nexport function PostsContext({\n  children\n}) {\n  _s();\n  const [state, setState] = useState(initStateValue);\n  const updatePosts = posts => {\n    setState(prev => ({\n      ...prev,\n      posts\n    }));\n  };\n  const updateSearchDate = searchDate => {\n    setState(prev => ({\n      ...prev,\n      searchDate\n    }));\n  };\n  const updateIsVoted = isVoted => {\n    setState(prev => ({\n      ...prev,\n      isVoted\n    }));\n  };\n  const updateIsAddedNew = isAddedNew => {\n    setState(prev => ({\n      ...prev,\n      isAddedNew\n    }));\n  };\n  const updateLoading = loading => {\n    setState(prev => ({\n      ...prev,\n      loading\n    }));\n  };\n  const updateNotify = notify => {\n    setState(prev => ({\n      ...prev,\n      notify\n    }));\n  };\n\n  // New function to update a single post\n  // Function to handle updating a post\n  const updatePost = (id, updatedData) => {\n    fetch(`http://localhost:8080/api/posts/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        ...updatedData,\n        date: state.searchDate.toISOString().split('T')[0]\n      }) // Ensure date is in 'yyyy-MM-dd'\n    }).then(response => {\n      console.log(\"Response status:\", response.status);\n      if (!response.ok) {\n        return response.text().then(error => {\n          console.error(\"Error response from backend:\", error);\n          throw new Error(`Failed to update the post. Server response: ${error}`);\n        });\n      }\n      return response.json();\n    }).then(updatedPost => {\n      console.log(\"Successfully updated post:\", updatedPost);\n      setState(prev => ({\n        ...prev,\n        posts: prev.posts.map(post => post.id === id ? updatedPost : post)\n      }));\n      updateNotify({\n        status: \"success\",\n        message: \"Post updated successfully\"\n      });\n    }).catch(error => {\n      console.error(\"Error updating post:\", error);\n      updateNotify({\n        status: \"error\",\n        message: error.message || \"Failed to update the post\"\n      });\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      posts: state.posts,\n      searchDate: state.searchDate,\n      isVoted: state.isVoted,\n      isAddedNew: state.isAddedNew,\n      loading: state.loading,\n      notify: state.notify,\n      updatePosts,\n      updateSearchDate,\n      updateIsVoted,\n      updateIsAddedNew,\n      updateLoading,\n      updateNotify,\n      updatePost,\n      // Provide the updatePost function in the context\n      deletePost\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 9\n  }, this);\n}\n_s(PostsContext, \"8NE/LJNgMuB9zFYEYahgz0RSuEM=\");\n_c = PostsContext;\nvar _c;\n$RefreshReg$(_c, \"PostsContext\");","map":{"version":3,"names":["createContext","useState","jsxDEV","_jsxDEV","initStateValue","posts","searchDate","Date","isVoted","isAddedNew","loading","notify","status","message","initContextValue","updatePosts","updateSearchDate","updateIsVoted","updateIsAddedNew","updateLoading","updateNotify","updatePost","id","updatedData","GlobalContext","PostsContext","children","_s","state","setState","prev","fetch","method","headers","body","JSON","stringify","date","toISOString","split","then","response","console","log","ok","text","error","Error","json","updatedPost","map","post","catch","Provider","value","deletePost","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/firanolabdisa/Desktop/tuan/1/cs472-project/daily-diary-front/src/contexts/PostsContext.tsx"],"sourcesContent":["import { createContext, ReactNode, useState } from \"react\";\nimport { Post } from \"../models/Post\";\nimport { AlertColor } from \"@mui/material\";\n\ntype StateType = {\n    posts: Post[];\n    searchDate: Date;\n    isVoted: boolean;\n    isAddedNew: boolean;\n    loading: boolean;\n    notify: Notify;\n};\n\ntype Notify = {\n    status: AlertColor;\n    message: string;\n};\n\nconst initStateValue = {\n    posts: [] as Post[],\n    searchDate: new Date(),\n    isVoted: false,\n    isAddedNew: false,\n    loading: false,\n    notify: { status: \"success\" as AlertColor, message: \"\" },\n};\n\nexport type ContextType = {\n    posts: Post[];\n    searchDate: Date;\n    isVoted: boolean;\n    isAddedNew: boolean;\n    loading: boolean;\n    notify: {\n        status: AlertColor;\n        message: string;\n    };\n    updatePosts: Function;\n    updateSearchDate: Function;\n    updateIsVoted: Function;\n    updateIsAddedNew: Function;\n    updateLoading: Function;\n    updateNotify: Function;\n    updatePost: (id: string, updatedData: { title: string; body: string }) => void;\n};\n\nconst initContextValue = {\n    ...initStateValue,\n    updatePosts: (posts: Post[]) => {},\n    updateSearchDate: (searchDate: Date) => {},\n    updateIsVoted: (isVoted: boolean) => {},\n    updateIsAddedNew: (isVoted: boolean) => {},\n    updateLoading: (loading: boolean) => {},\n    updateNotify: (notify: Notify) => {},\n    updatePost: (id: string, updatedData: { title: string; body: string }) => {},\n};\n\nexport const GlobalContext = createContext(initContextValue);\n\nexport function PostsContext({ children }: { children: ReactNode }) {\n    const [state, setState] = useState<StateType>(initStateValue);\n\n    const updatePosts = (posts: Post[]) => {\n        setState((prev) => ({ ...prev, posts }));\n    };\n\n    const updateSearchDate = (searchDate: Date) => {\n        setState((prev) => ({ ...prev, searchDate }));\n    };\n\n    const updateIsVoted = (isVoted: boolean) => {\n        setState((prev) => ({ ...prev, isVoted }));\n    };\n\n    const updateIsAddedNew = (isAddedNew: boolean) => {\n        setState((prev) => ({ ...prev, isAddedNew }));\n    };\n\n    const updateLoading = (loading: boolean) => {\n        setState((prev) => ({ ...prev, loading }));\n    };\n\n    const updateNotify = (notify: Notify) => {\n        setState((prev) => ({ ...prev, notify }));\n    };\n\n    // New function to update a single post\n// Function to handle updating a post\nconst updatePost = (id: string, updatedData: { title: string; body: string }) => {\n    fetch(`http://localhost:8080/api/posts/${id}`, {\n        method: \"PUT\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ ...updatedData, date: state.searchDate.toISOString().split('T')[0] }), // Ensure date is in 'yyyy-MM-dd'\n    })\n        .then(response => {\n            console.log(\"Response status:\", response.status);\n            if (!response.ok) {\n                return response.text().then((error) => {\n                    console.error(\"Error response from backend:\", error);\n                    throw new Error(`Failed to update the post. Server response: ${error}`);\n                });\n            }\n            return response.json();\n        })\n        .then((updatedPost: Post) => {\n            console.log(\"Successfully updated post:\", updatedPost);\n            setState((prev) => ({\n                ...prev,\n                posts: prev.posts.map((post) => (post.id === id ? updatedPost : post)),\n            }));\n            updateNotify({ status: \"success\", message: \"Post updated successfully\" });\n        })\n        .catch(error => {\n            console.error(\"Error updating post:\", error);\n            updateNotify({ status: \"error\", message: error.message || \"Failed to update the post\" });\n        });\n};\n\n    return (\n        <GlobalContext.Provider\n            value={{\n                posts: state.posts,\n                searchDate: state.searchDate,\n                isVoted: state.isVoted,\n                isAddedNew: state.isAddedNew,\n                loading: state.loading,\n                notify: state.notify,\n                updatePosts,\n                updateSearchDate,\n                updateIsVoted,\n                updateIsAddedNew,\n                updateLoading,\n                updateNotify,\n                updatePost, // Provide the updatePost function in the context\n                deletePost\n            }}\n        >\n            {children}\n        </GlobalContext.Provider>\n    );\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}