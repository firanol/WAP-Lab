{"ast":null,"code":"import { CustomError } from \"../utils/customError\";\nimport { StatusCode } from \"../models/enums/StatusCodeEnum\";\nexport class APIService {\n  constructor() {\n    // Method to get the base URL\n    this.getBaseUrl = () => {\n      return \"http://localhost:8080/api\"; // Ensure your base URL is correct\n    };\n    // Method to generate HTTP headers for the requests\n    this.generateHeader = () => {\n      const headers = new Headers();\n      headers.set(\"Accept\", \"application/json\");\n      headers.set(\"Content-Type\", \"application/json\");\n      return headers;\n    };\n    // Method to handle GET requests\n    this.getData = url => {\n      return fetch(url, {\n        method: \"GET\",\n        headers: this.generateHeader()\n      });\n    };\n    // Method to handle POST requests\n    this.postData = (url, data) => {\n      return fetch(url, {\n        method: \"POST\",\n        headers: this.generateHeader(),\n        body: JSON.stringify(data)\n      });\n    };\n    // Method to handle PUT requests\n    this.putData = (url, data) => {\n      return fetch(url, {\n        method: \"PUT\",\n        headers: this.generateHeader(),\n        body: JSON.stringify(data)\n      });\n    };\n    // Method to handle PATCH requests\n    this.patchData = (url, data) => {\n      return fetch(url, {\n        method: \"PATCH\",\n        headers: this.generateHeader(),\n        body: JSON.stringify(data)\n      });\n    };\n    // Updated method to handle DELETE requests\n    this.deleteData = url => {\n      return fetch(url, {\n        method: \"DELETE\",\n        // Corrected from \"GET\" to \"DELETE\"\n        headers: this.generateHeader()\n      });\n    };\n    // Method to throw an error based on the response status\n    this.throwError = async response => {\n      try {\n        const errorResponse = await response.json();\n        if (errorResponse.status === StatusCode.BAD_REQUEST) {\n          throw new CustomError(errorResponse.status, errorResponse.message, response.statusText);\n        }\n        if (errorResponse.status === StatusCode.NOT_FOUND) {\n          alert(\"The requested resource was not found.\");\n          return;\n        }\n\n        // You can add additional checks if there are other status codes you handle\n        // For other unhandled status codes, redirect to the error page\n        window.location.href = \"/error\";\n      } catch (error) {\n        // If the response is not in JSON format, handle the error gracefully\n        console.error(\"Error parsing response:\", error);\n        window.location.href = \"/error\";\n      }\n    };\n  }\n}","map":{"version":3,"names":["CustomError","StatusCode","APIService","constructor","getBaseUrl","generateHeader","headers","Headers","set","getData","url","fetch","method","postData","data","body","JSON","stringify","putData","patchData","deleteData","throwError","response","errorResponse","json","status","BAD_REQUEST","message","statusText","NOT_FOUND","alert","window","location","href","error","console"],"sources":["/Users/firanolabdisa/Desktop/cs472-project/daily-diary-front/src/services/apiService.ts"],"sourcesContent":["import { CustomError } from \"../utils/customError\";\nimport { StatusCode } from \"../models/enums/StatusCodeEnum\";\nimport { ErrorResponse } from \"../models/ErrorResponse\";\n\nexport class APIService {\n    // Method to get the base URL\n    getBaseUrl = (): string => {\n        return \"http://localhost:8080/api\"; // Ensure your base URL is correct\n    };\n\n    // Method to generate HTTP headers for the requests\n    generateHeader = (): Headers => {\n        const headers: Headers = new Headers();\n        headers.set(\"Accept\", \"application/json\");\n        headers.set(\"Content-Type\", \"application/json\");\n        return headers;\n    };\n\n    // Method to handle GET requests\n    getData = (url: string): Promise<Response> => {\n        return fetch(url, {\n            method: \"GET\",\n            headers: this.generateHeader(),\n        });\n    };\n\n    // Method to handle POST requests\n    postData = (url: string, data: any): Promise<Response> => {\n        return fetch(url, {\n            method: \"POST\",\n            headers: this.generateHeader(),\n            body: JSON.stringify(data),\n        });\n    };\n\n    // Method to handle PUT requests\n    putData = (url: string, data: any): Promise<Response> => {\n        return fetch(url, {\n            method: \"PUT\",\n            headers: this.generateHeader(),\n            body: JSON.stringify(data),\n        });\n    };\n\n    // Method to handle PATCH requests\n    patchData = (url: string, data: any): Promise<Response> => {\n        return fetch(url, {\n            method: \"PATCH\",\n            headers: this.generateHeader(),\n            body: JSON.stringify(data),\n        });\n    };\n\n    // Updated method to handle DELETE requests\n    deleteData = (url: string): Promise<Response> => {\n        return fetch(url, {\n            method: \"DELETE\", // Corrected from \"GET\" to \"DELETE\"\n            headers: this.generateHeader(),\n        });\n    };\n\n    // Method to throw an error based on the response status\n    throwError = async (response: Response) => {\n        try {\n            const errorResponse: ErrorResponse = await response.json();\n            \n            if (errorResponse.status === StatusCode.BAD_REQUEST) {\n                throw new CustomError(\n                    errorResponse.status,\n                    errorResponse.message,\n                    response.statusText\n                );\n            }\n\n            if (errorResponse.status === StatusCode.NOT_FOUND) {\n                alert(\"The requested resource was not found.\");\n                return;\n            }\n\n            // You can add additional checks if there are other status codes you handle\n            // For other unhandled status codes, redirect to the error page\n            window.location.href = \"/error\";\n        } catch (error) {\n            // If the response is not in JSON format, handle the error gracefully\n            console.error(\"Error parsing response:\", error);\n            window.location.href = \"/error\";\n        }\n    };\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,sBAAsB;AAClD,SAASC,UAAU,QAAQ,gCAAgC;AAG3D,OAAO,MAAMC,UAAU,CAAC;EAAAC,YAAA;IACpB;IAAA,KACAC,UAAU,GAAG,MAAc;MACvB,OAAO,2BAA2B,CAAC,CAAC;IACxC,CAAC;IAED;IAAA,KACAC,cAAc,GAAG,MAAe;MAC5B,MAAMC,OAAgB,GAAG,IAAIC,OAAO,CAAC,CAAC;MACtCD,OAAO,CAACE,GAAG,CAAC,QAAQ,EAAE,kBAAkB,CAAC;MACzCF,OAAO,CAACE,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;MAC/C,OAAOF,OAAO;IAClB,CAAC;IAED;IAAA,KACAG,OAAO,GAAIC,GAAW,IAAwB;MAC1C,OAAOC,KAAK,CAACD,GAAG,EAAE;QACdE,MAAM,EAAE,KAAK;QACbN,OAAO,EAAE,IAAI,CAACD,cAAc,CAAC;MACjC,CAAC,CAAC;IACN,CAAC;IAED;IAAA,KACAQ,QAAQ,GAAG,CAACH,GAAW,EAAEI,IAAS,KAAwB;MACtD,OAAOH,KAAK,CAACD,GAAG,EAAE;QACdE,MAAM,EAAE,MAAM;QACdN,OAAO,EAAE,IAAI,CAACD,cAAc,CAAC,CAAC;QAC9BU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,IAAI;MAC7B,CAAC,CAAC;IACN,CAAC;IAED;IAAA,KACAI,OAAO,GAAG,CAACR,GAAW,EAAEI,IAAS,KAAwB;MACrD,OAAOH,KAAK,CAACD,GAAG,EAAE;QACdE,MAAM,EAAE,KAAK;QACbN,OAAO,EAAE,IAAI,CAACD,cAAc,CAAC,CAAC;QAC9BU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,IAAI;MAC7B,CAAC,CAAC;IACN,CAAC;IAED;IAAA,KACAK,SAAS,GAAG,CAACT,GAAW,EAAEI,IAAS,KAAwB;MACvD,OAAOH,KAAK,CAACD,GAAG,EAAE;QACdE,MAAM,EAAE,OAAO;QACfN,OAAO,EAAE,IAAI,CAACD,cAAc,CAAC,CAAC;QAC9BU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,IAAI;MAC7B,CAAC,CAAC;IACN,CAAC;IAED;IAAA,KACAM,UAAU,GAAIV,GAAW,IAAwB;MAC7C,OAAOC,KAAK,CAACD,GAAG,EAAE;QACdE,MAAM,EAAE,QAAQ;QAAE;QAClBN,OAAO,EAAE,IAAI,CAACD,cAAc,CAAC;MACjC,CAAC,CAAC;IACN,CAAC;IAED;IAAA,KACAgB,UAAU,GAAG,MAAOC,QAAkB,IAAK;MACvC,IAAI;QACA,MAAMC,aAA4B,GAAG,MAAMD,QAAQ,CAACE,IAAI,CAAC,CAAC;QAE1D,IAAID,aAAa,CAACE,MAAM,KAAKxB,UAAU,CAACyB,WAAW,EAAE;UACjD,MAAM,IAAI1B,WAAW,CACjBuB,aAAa,CAACE,MAAM,EACpBF,aAAa,CAACI,OAAO,EACrBL,QAAQ,CAACM,UACb,CAAC;QACL;QAEA,IAAIL,aAAa,CAACE,MAAM,KAAKxB,UAAU,CAAC4B,SAAS,EAAE;UAC/CC,KAAK,CAAC,uCAAuC,CAAC;UAC9C;QACJ;;QAEA;QACA;QACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;MACnC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACAC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/CH,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;MACnC;IACJ,CAAC;EAAA;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}